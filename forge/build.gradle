plugins {
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.spongepowered.mixin' version "${mixingradle_version}"
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'
apply plugin: 'mod-update'
apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version as int)

minecraft {
    mappings channel: 'official', version: minecraft_version
    copyIdeResources = true
    runs {
        client {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            args = ['--username', "henkelmax${new Random().nextInt(1000)}"]
        }
        server {
            workingDirectory file('run/server')
            property 'forge.logging.console.level', 'debug'
            arg '--nogui'
        }
        data {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
    maven { url = 'https://maven.minecraftforge.net' }
}

configurations {
    shadowMc.extendsFrom minecraftLibrary
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly(project(':common')){
        transitive false
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    minecraftLibrary "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
    shadowMc "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(['Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_vendor,
                    'Specification-Version'   : '1',
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_vendor,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'MixinConnector'          : 'de.maxhenkel.shulkerbox.MixinConnector'
        ])
    }
    finalizedBy 'reobfJar'
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

processResources {
    filesMatching('**/*.toml') {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_vendor': mod_vendor,
                'mod_name': mod_name,
                'mod_forge_version': mod_forge_version,
                'mod_loader_version': mod_loader_version,
                'minecraft_version': minecraft_version
    }
    from("${project(':common').projectDir}/src/main/resources") {
        exclude('*.mixins.json')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    it.options.release = java_version as int
}

tasks.withType(JavaCompile) {
    source(project(':common').sourceSets.main.allSource)
}

shadowJar {
    configurations = [project.configurations.shadowMc]
    archiveClassifier = ''
    relocate 'de.maxhenkel.configbuilder', "de.maxhenkel.${mod_id}.configbuilder"
}
shadowJar.dependsOn('reobfJar')

reobf {
    shadowJar {}
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file('changelog.md')
        releaseType = release_type
        addGameVersion curseforge_minecraft_version
        addGameVersion 'Forge'
        addGameVersion "Java ${java_version}"
        mainArtifact(jar) {
            displayName = "[FORGE][${minecraft_version}] ${mod_name} ${mod_version}"
        }
    }
}
tasks.curseforge.dependsOn(shadowJar)

tasks.modrinth.configure({
    group = 'upload'
})
tasks.modrinthSyncBody.configure({
    group = 'upload'
})
modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = modrinth_id
    versionNumber = "forge-${mod_version}"
    versionName = "[FORGE][${minecraft_version}] ${mod_name} ${mod_version}"
    uploadFile = jar
    versionType = release_type.toUpperCase()
    changelog = file('changelog.md').text
    gameVersions = [minecraft_version]
    loaders = ['forge']
}
tasks.modrinth.dependsOn(shadowJar)

modUpdate {
    serverURL = 'https://update.maxhenkel.de/'
    modID = mod_id
    gameVersion = minecraft_version
    modVersion = mod_version
    changelogFile = file('changelog.md')
    releaseType = release_type
    tags = recommended == 'true' ? ['recommended'] : []
}